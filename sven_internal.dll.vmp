<?xml version="1.0" encoding="UTF-8" ?>
<Document Version="2">
    <Protection InputFileName="sven_internal.dll" Options="466888" VMCodeSectionName=".SVENINT" VMInstances="10" VMComplexity="50">
        <Messages>
            <Message Id="0">STATUS_ACCESS_VIOLATION (0xC0000005)</Message>
            <Message Id="1">VERR_VMX_NO_VMX</Message>
            <Message Id="2">The instruction at 0x00000000 referenced memory at 0x00000000. The memory could not be read.</Message>
        </Messages>
        <Folders>
            <Folder Name="CSvenInternal" />
            <Folder Name="Security" />
            <Folder Name="CAUClient" />
            <Folder Name="CSpeedrunTools" />
            <Folder Name="ConCommands" />
        </Folders>
        <Procedures>
            <Procedure MapAddress="CSvenInternal::Unload(void)" Options="0" Folder="0" CompilationType="2" Complexity="100" />
            <Procedure MapAddress="CSvenInternal::Load(class IBaseInterface * (*)(char const *,int *),class ISvenModAPI *,class IPluginHelpers *)" Options="0" Folder="0" CompilationType="2" Complexity="100" BreakOffset="3967" />
            <Procedure MapAddress="security::utils::obfuscate_exit_antidebug(void)" Options="0" Folder="1" />
            <Procedure MapAddress="security::debug::memory::being_debugged_peb(void)" Options="0" Folder="1" />
            <Procedure MapAddress="security::debug::memory::remote_debugger_present(void)" Options="0" Folder="1" />
            <Procedure MapAddress="security::debug::memory::is_debugger_present(void)" Options="0" Folder="1" />
            <Procedure MapAddress="security::debug::memory::nt_global_flag_peb(void)" Options="0" Folder="1" />
            <Procedure MapAddress="security::debug::memory::nt_query_information_process(void)" Options="0" Folder="1" />
            <Procedure MapAddress="security::debug::memory::nt_set_information_thread(void)" Options="0" Folder="1" />
            <Procedure MapAddress="security::debug::memory::write_buffer(void)" Options="0" Folder="1" />
            <Procedure MapAddress="security::debug::exceptions::close_handle_exception(void)" Options="0" Folder="1" />
            <Procedure MapAddress="security::debug::exceptions::single_step_exception(void)" Options="0" Folder="1" />
            <Procedure MapAddress="security::debug::exceptions::int_3(void)" Options="0" Folder="1" />
            <Procedure MapAddress="security::debug::exceptions::multibyte_int3(void)" Options="0" Folder="1" />
            <Procedure MapAddress="security::debug::exceptions::int_2c(void)" Options="0" Folder="1" />
            <Procedure MapAddress="security::debug::exceptions::int_2d(void)" Options="0" Folder="1" />
            <Procedure MapAddress="security::debug::exceptions::prefix_hop(void)" Options="0" Folder="1" />
            <Procedure MapAddress="security::debug::exceptions::debug_string(void)" Options="0" Folder="1" />
            <Procedure MapAddress="security::debug::timing::get_tick_count(void)" Options="0" Folder="1" />
            <Procedure MapAddress="security::debug::cpu::hardware_debug_registers(void)" Options="0" Folder="1" />
            <Procedure MapAddress="security::debug::cpu::mov_ss(void)" Options="0" Folder="1" />
            <Procedure MapAddress="security::debug::virtualization::check_cpuid(void)" Options="0" Folder="1" />
            <Procedure MapAddress="security::debug::virtualization::check_registry(void)" Options="0" Folder="1" />
            <Procedure MapAddress="security::debug::check(void)" Options="0" Folder="1" />
            <Procedure MapAddress="CSvenInternal::PostLoad(bool)" Options="0" Folder="0" CompilationType="2" Complexity="100" />
            <Procedure MapAddress="CSvenInternal::OnFirstClientdataReceived(struct client_data_s *,float)" Options="0" Folder="0" CompilationType="2" Complexity="100" />
            <Procedure MapAddress="CSvenInternal::OnBeginLoading(void)" Options="0" Folder="0" CompilationType="2" Complexity="100" />
            <Procedure MapAddress="CSvenInternal::OnEndLoading(void)" Options="0" Folder="0" CompilationType="2" Complexity="100" />
            <Procedure MapAddress="CSvenInternal::OnDisconnect(void)" Options="0" Folder="0" CompilationType="2" Complexity="100" />
            <Procedure MapAddress="CAUClient::Session(int *)" Options="0" Folder="2" CompilationType="2" />
            <Procedure MapAddress="CAUClient::RecvUpdate(void)" Options="0" Folder="2" CompilationType="2" />
            <Procedure MapAddress="CAUClient::EstablishConnection(void)" Options="0" Folder="2" CompilationType="2" />
            <Procedure MapAddress="CAUClient::Disconnect(int)" Options="0" Folder="2" CompilationType="2" />
            <Procedure MapAddress="CAUClient::RecvDisconnect(int *)" Options="0" Folder="2" CompilationType="2" />
            <Procedure MapAddress="CAUClient::RecvPacket(void)" Options="0" Folder="2" CompilationType="2" />
            <Procedure MapAddress="CAUClient::SendPlatformType(void)" Options="0" Folder="2" CompilationType="2" />
            <Procedure MapAddress="CAUClient::SendAppVersion(struct app_version_t &amp;,bool *)" Options="0" Folder="2" CompilationType="2" />
            <Procedure MapAddress="CAUClient::IsServerResponseOK(void)" Options="0" Folder="2" CompilationType="2" />
            <Procedure MapAddress="CAUClient::RecvServerResponse(int *)" Options="0" Folder="2" CompilationType="2" />
            <Procedure MapAddress="security::debug::memory::check_window_name(void)" Options="0" Folder="1" />
            <Procedure MapAddress="security::utils::obfuscate_entry_antidebug(void (*)(void))" Options="0" Folder="1" />
            <Procedure MapAddress="_DllMain@12" Options="0" Folder="1" CompilationType="2" Complexity="100" />
            <Procedure MapAddress="EntryCheck(struct HINSTANCE__ *)" Options="0" Folder="1" CompilationType="2" Complexity="100" />
            <Procedure MapAddress="__ehhandler$?EntryCheck@@YGKPAUHINSTANCE__@@@Z" Options="0" Folder="1" CompilationType="2" Complexity="100" />
            <Procedure MapAddress="CSvenInternal::GameFrame(enum client_state_t,double,bool)" Options="0" Folder="0" CompilationType="1" Complexity="0" />
            <Procedure MapAddress="CSvenInternal::DrawHUD(float,int)" Options="0" Folder="0" CompilationType="1" Complexity="0" />
            <Procedure MapAddress="CSvenInternal::Pause(void)" Options="0" Folder="0" CompilationType="2" Complexity="100" />
            <Procedure MapAddress="CSvenInternal::InitFolders(class ISvenModAPI *)" Options="0" Folder="0" CompilationType="2" Complexity="100" />
            <Procedure MapAddress="`dynamic initializer for &apos;__g_CreateCSvenInternalIClientPlugin_reg&apos;&apos;(void)" Options="0" Folder="0" Complexity="100" />
            <Procedure MapAddress="__CreateCSvenInternalIClientPlugin_interface(void)" Options="0" Folder="0" Complexity="100" />
            <Procedure MapAddress="__unwindfunclet$?InitFolders@CSvenInternal@@AAEXPAVISvenModAPI@@@Z$0" Options="0" Folder="0" Complexity="100" />
            <Procedure MapAddress="__ehhandler$?InitFolders@CSvenInternal@@AAEXPAVISvenModAPI@@@Z" Options="0" Folder="0" Complexity="100" />
            <Procedure MapAddress="CSvenInternal::GetAPIVersion(void)" Options="0" Folder="0" Complexity="100" />
            <Procedure MapAddress="CSvenInternal::`vector deleting destructor&apos;(unsigned int)" Options="0" Folder="0" Complexity="100" />
            <Procedure MapAddress="CSpeedrunTools::GameFrame(bool)" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="CSpeedrunTools::CreateMove(float,struct usercmd_s *,int)" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="CSpeedrunTools::Draw(void)" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="CSpeedrunTools::ShowTimer(float,bool)" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="CSpeedrunTools::StartTimer(void)" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="CSpeedrunTools::StopTimer(void)" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="CSpeedrunTools::CheckPlayerHulls_Server(void)" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="CSpeedrunTools::BroadcastPlayerHull_Server(int,int,class Vector const &amp;,bool)" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="CSpeedrunTools::DrawPlayerHull_Comm(int,int,class Vector const &amp;,bool)" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="CSpeedrunTools::DrawPlayerHulls(void)" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="CSpeedrunTools::DrawReviveBoostInfo(void)" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="CSpeedrunTools::DrawPredictedReviveBoost(void)" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="CSpeedrunTools::DrawReviveInfo(void)" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="CSpeedrunTools::DrawReviveUnstuckArea(void)" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="CSpeedrunTools::DrawLandPoint(void)" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="CSpeedrunTools::SetTimescale(float)" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="CSpeedrunTools::ShowPosition(int,int,int)" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="CSpeedrunTools::ShowVelocity(int,int,int)" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="CSpeedrunTools::ShowGaussBoostInfo(int,int,int)" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="CSpeedrunTools::ShowSelfgaussInfo(int,int,int)" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="CSpeedrunTools::ShowEntityInfo(int,int,int)" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="CSpeedrunTools::ShowReviveInfo(int,int,int)" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="CSpeedrunTools::ShowReviveBoostInfo(int,int,int)" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="CSpeedrunTools::`vector deleting destructor&apos;(unsigned int)" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="CSpeedrunTools::Load(void)" Options="0" Folder="3" />
            <Procedure MapAddress="CSpeedrunTools::PostLoad(void)" Options="0" Folder="3" />
            <Procedure MapAddress="CSpeedrunTools::Unload(void)" Options="0" Folder="3" />
            <Procedure MapAddress="std::vector&lt;char,class std::allocator&lt;char&gt; &gt;::_Xlength(void)" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="std::vector&lt;struct std::_Loop_vals_t,class std::allocator&lt;struct std::_Loop_vals_t&gt; &gt;::~vector&lt;struct std::_Loop_vals_t,class std::allocator&lt;struct std::_Loop_vals_t&gt; &gt;(void)" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="`void CSpeedrunTools::CreateMove(float,struct usercmd_s *,int)&apos;::`5&apos;::&lt;lambda_1&gt;::operator()(float &amp;,float,float)" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="`void CSpeedrunTools::ShowTimer(float,bool)&apos;::`2&apos;::&lt;lambda_1&gt;::operator()(int,int,int,int,int,int,int,int)" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="std::_Sort_unchecked&lt;struct `void CSpeedrunTools::ShowEntityInfo(int,int,int)&apos;::`48&apos;::eligible_player_t *,class `void CSpeedrunTools::&lt;lambda_1&gt;(int,int,int)&apos;::`68&apos;::&lt;lambda_1&gt; &gt;(struct `void CSpeedrunTools::ShowEntityInfo(int,int,int)&apos;::`48&apos;::eligible_player_t *,struct `void CSpeedrunTools::ShowEntityInfo(int,int,int)&apos;::`48&apos;::eligible_player_t *,int,class `void CSpeedrunTools::&lt;lambda_1&gt;(int,int,int)&apos;::`68&apos;::&lt;lambda_1&gt;)" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="std::vector&lt;struct `void CSpeedrunTools::ShowEntityInfo(int,int,int)&apos;::`48&apos;::eligible_player_t,class std::allocator&lt;struct `void CSpeedrunTools::ShowEntityInfo(int,int,int)&apos;::`48&apos;::eligible_player_t&gt; &gt;::_Emplace_reallocate&lt;struct `void CSpeedrunTools::ShowEntityInfo(int,int,int)&apos;::`48&apos;::eligible_player_t&gt;(struct `void CSpeedrunTools::ShowEntityInfo(int,int,int)&apos;::`48&apos;::eligible_player_t * const,struct `void CSpeedrunTools::ShowEntityInfo(int,int,int)&apos;::`48&apos;::eligible_player_t &amp;&amp;)" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="std::_Partition_by_median_guess_unchecked&lt;struct `void CSpeedrunTools::ShowEntityInfo(int,int,int)&apos;::`48&apos;::eligible_player_t *,class `void CSpeedrunTools::&lt;lambda_1&gt;(int,int,int)&apos;::`68&apos;::&lt;lambda_1&gt; &gt;(struct `void CSpeedrunTools::ShowEntityInfo(int,int,int)&apos;::`48&apos;::eligible_player_t *,struct `void CSpeedrunTools::ShowEntityInfo(int,int,int)&apos;::`48&apos;::eligible_player_t *,class `void CSpeedrunTools::&lt;lambda_1&gt;(int,int,int)&apos;::`68&apos;::&lt;lambda_1&gt;)" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="std::_Pop_heap_hole_by_index&lt;struct `void CSpeedrunTools::ShowEntityInfo(int,int,int)&apos;::`48&apos;::eligible_player_t *,struct `void CSpeedrunTools::ShowEntityInfo(int,int,int)&apos;::`48&apos;::eligible_player_t,class `void CSpeedrunTools::&lt;lambda_1&gt;(int,int,int)&apos;::`68&apos;::&lt;lambda_1&gt; &gt;(struct `void CSpeedrunTools::ShowEntityInfo(int,int,int)&apos;::`48&apos;::eligible_player_t *,int,int,struct `void CSpeedrunTools::ShowEntityInfo(int,int,int)&apos;::`48&apos;::eligible_player_t &amp;&amp;,class `void CSpeedrunTools::&lt;lambda_1&gt;(int,int,int)&apos;::`68&apos;::&lt;lambda_1&gt;)" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="std::_Guess_median_unchecked&lt;struct `void CSpeedrunTools::ShowEntityInfo(int,int,int)&apos;::`48&apos;::eligible_player_t *,class `void CSpeedrunTools::&lt;lambda_1&gt;(int,int,int)&apos;::`68&apos;::&lt;lambda_1&gt; &gt;(struct `void CSpeedrunTools::ShowEntityInfo(int,int,int)&apos;::`48&apos;::eligible_player_t *,struct `void CSpeedrunTools::ShowEntityInfo(int,int,int)&apos;::`48&apos;::eligible_player_t *,struct `void CSpeedrunTools::ShowEntityInfo(int,int,int)&apos;::`48&apos;::eligible_player_t *,class `void CSpeedrunTools::&lt;lambda_1&gt;(int,int,int)&apos;::`68&apos;::&lt;lambda_1&gt;)" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="__unwindfunclet$?ShowEntityInfo@CSpeedrunTools@@QAEXHHH@Z$0" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="__ehhandler$?ShowEntityInfo@CSpeedrunTools@@QAEXHHH@Z" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="__unwindfunclet$?Load@CSpeedrunTools@@UAE_NXZ$0" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="__unwindfunclet$?Load@CSpeedrunTools@@UAE_NXZ$1" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="__unwindfunclet$?Load@CSpeedrunTools@@UAE_NXZ$2" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="__unwindfunclet$?Load@CSpeedrunTools@@UAE_NXZ$3" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="__ehhandler$?Load@CSpeedrunTools@@UAE_NXZ" Options="0" Folder="3" CompilationType="1" />
            <Procedure MapAddress="ConCommand_CamHack(void)" Options="0" Folder="4" />
            <Procedure MapAddress="ConCommand_CamHackResetRoll(void)" Options="0" Folder="4" />
            <Procedure MapAddress="ConCommand_CamHackReset(void)" Options="0" Folder="4" />
            <Procedure MapAddress="ConCommand_ChatColorsLoadPlayers(void)" Options="0" Folder="4" />
            <Procedure MapAddress="ConCommand_PrintSpamKeyWords(void)" Options="0" Folder="4" />
            <Procedure MapAddress="ConCommand_PrintSpamTasks(void)" Options="0" Folder="4" />
            <Procedure MapAddress="ConCommand_RotateDeadBody(void)" Options="0" Folder="4" />
            <Procedure MapAddress="ConCommand_TertiaryAttackGlitch(void)" Options="0" Folder="4" />
            <Procedure MapAddress="ConCommand_QuakeGuns(void)" Options="0" Folder="4" />
            <Procedure MapAddress="ConCommand_AutoSelfSink(void)" Options="0" Folder="4" />
            <Procedure MapAddress="ConCommand_AutoSelfSink2(void)" Options="0" Folder="4" />
            <Procedure MapAddress="ConCommand_ResetColors(void)" Options="0" Folder="4" />
            <Procedure MapAddress="ConCommand_SyncColors(void)" Options="0" Folder="4" />
            <Procedure MapAddress="ConCommand_DropEmptyWeapon(void)" Options="0" Folder="4" />
            <Procedure MapAddress="ConCommand_FirstPersonRoaming(void)" Options="0" Folder="4" />
            <Procedure MapAddress="ConCommand_Freeze(void)" Options="0" Folder="4" />
            <Procedure MapAddress="ConCommand_Freeze2(void)" Options="0" Folder="4" />
            <Procedure MapAddress="ConCommand_ChangeSkybox(class CCommand const &amp;)" Options="0" Folder="4" />
            <Procedure MapAddress="ConCommand_ResetSkybox(void)" Options="0" Folder="4" />
            <Procedure MapAddress="ConCommand_ThirdPerson_ResetPosition(void)" Options="0" Folder="4" />
            <Procedure MapAddress="ConCommand_ThirdPerson_ResetAngles(void)" Options="0" Folder="4" />
            <Procedure MapAddress="CDefaultAccessor::RegisterConCommandBase(class ConCommandBase *)" Options="0" Folder="4" />
            <Procedure MapAddress="ConCommandBase::`vector deleting destructor&apos;(unsigned int)" Options="0" Folder="4" />
            <Procedure MapAddress="ConCommandBase::~ConCommandBase(void)" Options="0" Folder="4" />
            <Procedure MapAddress="ConCommandBase::GetDLLIdentifier(void)" Options="0" Folder="4" />
            <Procedure MapAddress="ConCommandBase::Create(char const *,char const *,int)" Options="0" Folder="4" />
            <Procedure MapAddress="ConCommandBase::Init(void)" Options="0" Folder="4" />
            <Procedure MapAddress="ConCommandBase::IsFlagSet(int)" Options="0" Folder="4" />
            <Procedure MapAddress="ConCommandBase::AddFlags(int)" Options="0" Folder="4" />
            <Procedure MapAddress="ConCommandBase::RemoveFlags(int)" Options="0" Folder="4" />
            <Procedure MapAddress="ConCommand::`vector deleting destructor&apos;(unsigned int)" Options="0" Folder="4" />
            <Procedure MapAddress="ConCommand::IsFlagSet(int)" Options="0" Folder="4" />
            <Procedure MapAddress="ConCommand::AddFlags(int)" Options="0" Folder="4" />
            <Procedure MapAddress="ConCommand::RemoveFlags(int)" Options="0" Folder="4" />
            <Procedure MapAddress="ConCommand::GetFlags(void)" Options="0" Folder="4" />
        </Procedures>
        <Objects />
    </Protection>
    <Script />
</Document>
